#!/usr/bin/env bash

#-------#
# DEBUG #
#-------#{{{
#set -vx
#}}}

#-------------#
# SCRIPT NAME #
#-------------#
_name_=${0##*/}

#-----------#
# ERROR MSG #
#-----------#
die(){ printf "%s: %b \n" "${_name_^}" "$@" >&2 ; exit 1 ;}

#--------------------#
# GIT URLS FROM FILE #
#--------------------#
_urls_(){
[ -e "$_FILE_" ] || die "$_FILE_: No such file or directory\nNo URLs found."

(grep -Po "$URLGATE_REGEX" "$_FILE_" 2> /dev/null) > "$URLGATE_TMP"

[ "$(< $URLGATE_TMP)" ] && {
    [ "$_SELECT_" -o "$_GREP_" -o "$_LIST_" ] || cat "$URLGATE_TMP"
} || die "$_FILE_: No URLs found."
}

#--------------------#
# CURL FILE FROM URL #
#--------------------#
_curl_(){
local CURL_PAGE

read -r CURL_PAGE < <(${URLGATE_CURL_CMD} "$_CURL_" 2> /dev/null)

(printf "%b\n" "$CURL_PAGE" | grep -Po "$URLGATE_REGEX" 2> /dev/null) > "$URLGATE_TMP"

[ "$(< $URLGATE_TMP)" ] && {
    [ "$_SELECT_" -o "$_GREP_" -o "$_LIST_" -o "$_EXEC_" ] || cat "$URLGATE_TMP"
} || die "$_CURL_: No URLs found."
}

#---------------#
# LIST ALL URLS #
#---------------#
_list_(){
local line
local count=0
while read -r line ; do
    ((count++))
    printf "(%3d) - %s\n" "$count" "$line"
done < $URLGATE_TMP
}

#---------------------#
# GREP NAME FROM LIST #
#---------------------#
_grep_(){
local GREP_RESULT

GREP_RESULT=$(${URLGATE_GREP_CMD} "$_GREP_" "$URLGATE_TMP")

[ "$GREP_RESULT" ] && {
    printf "%b\n" "$GREP_RESULT" > "$URLGATE_TMP"
    [ "$_SELECT_" -o "$_LIST_" -o "$_EXEC_" ] || cat "$URLGATE_TMP"
} || die "$_GREP_: No URLs found."
}

#----------------------#
# SHOW SELECTION MENU  #
#----------------------#
_select_(){
local SELECTED_ITEM

read -r SELECTED_ITEM < <(cat "$URLGATE_TMP" | ${URLGATE_DMENU_CMD})

[ "$SELECTED_ITEM" ] && {
    [ "$_EXEC_" ] && printf "%s\n" "$SELECTED_ITEM" > "$URLGATE_TMP" || printf "%s\n" "$SELECTED_ITEM"
} || die "Select : No URLs found."
}

#---------------------#
# EXEC COMMAND ON URL #
#---------------------#
_exec_(){
local URL=$(cat "$URLGATE_TMP")
local EXEC_CMD=$(printf "%s\n" "$URLGATE_EXEC_CMD" | sed "s;\%u;$URL;" 2> /dev/null)
[ "$_SELECT_" ] && eval "$EXEC_CMD" || die "EXEC: -s option not selected"
}

#-------------#
# HELP DIALOG #
#-------------#
_help_(){
while read ; do
    printf "%s\n" "$REPLY"
done <<- HELP
${_name_^^} Extract URLs from a text file
Usage: ${_name_} [OPTIONS] ... [FILE] ...
    Or: [CMD] | ${_name_} [OPTIONS]

OPTIONS
    -f <file> : Extract URLs from file
    -c <url>  : Extract URLs from the web
    -l        : List All Extracted URLs
    -g <text> : Use only URLs that match TEXT
    -s        : Dmenu Selection menu
    -e <file> : Exec command or script to use [%u = URL]
    -r <regx> : REGEX regular expressions to use
    -h        : Display this help text and exit

VARIABLES
    URLGATE_GREP_CMD   Command to grep with.           Default [grep]
    URLGATE_DMENU_CMD  Dmenu command to use.           Default [dmenu -p Urlgate -l 10 -i]
    URLGATE_CURL_CMD   Command to curl Web page.       Default [curl -s]
    URLGATE_EXEC_CMD   Exec command or script to use.  Default [xdg-open %u] "(%u) Replaced by the link"
    URLGATE_REGEX      REGEX regular expressions to use

NOTE
    Export ${_name_^^} Variables before you use them 
HELP
exit 0
}

#---------------#
# MAIN FUNCTION #
#---------------#
_main_(){
while getopts ":f:c:lg:se:r:h" OPT ; do
    case "$OPT" in
        f )
            _FILE_="$OPTARG"
            ((TASK++))
            ((EMPTY++))
            ;;
        c )
            _CURL_="$OPTARG"
            ((TASK++))
            ((EMPTY++))
            ;;
        l )
            _LIST_=true
            ((SHOW++))
            ;;
        g )
            _GREP_="$OPTARG"
            ;;
        s )
            _SELECT_=true
            ((SHOW++))
            ;;
        e )
            _EXEC_=true
            URLGATE_EXEC="$OPTARG"
            ;;
        r )
            URLGATE_REGEX="$OPTARG"
            ;;
        h )
            _HELP_=true
            ((EMPTY++))
            ;;
        : )
            die "option requires an argument -- '${OPTARG}'\nTry '${_name_} -h' for more information."
            ;;
        * )
            die "invalid option -- '${OPTARG}'\nTry '${_name_} -h' for more information."
            ;;
    esac
done
}

#-------------------#
# RUN MAIN FUNCTION #
#-------------------#
# get pipe text
[ -p /dev/stdin ] && { _FILE_="/dev/stdin" && ((TASKS++)) && ((EMPTY++)) ;}
_main_ "$@"

#------------------#
# SCRIPT VARIABLES #
#------------------#
URLGATE_TMP="/tmp/${_name_}.XXX"
[ "$URLGATE_GREP_CMD" ]  || URLGATE_GREP_CMD="grep"
[ "$URLGATE_DMENU_CMD" ] || URLGATE_DMENU_CMD="dmenu -p Urlgate -l 10 -i"
[ "$URLGATE_CURL_CMD" ]  || URLGATE_CURL_FLG="curl -s"
[ "$URLGATE_EXEC_CMD" ]  || URLGATE_EXEC="xdg-open %u"
[ "$URLGATE_REGEX" ]     || URLGATE_REGEX="(((http|https|ftp|gopher)|mailto):(\/\/)?[^ <>\"\t]|(www|ftp)[0-9]?\\.[-a-z0-9.]+)[^ .,;\t\n\r<\">\\):]?[^, <>\"\t]*[^ .,;\t\n\r<\">\\):]"

#----------------------#
# RUN SELECTED OPTIONS #
#----------------------#
(( TASK > 1 ))  && die "no multi tasks request allowed (-f,-c or pipeline)\nTry '${_name_} -h' for more information."
(( SHOW > 1 ))  && die "no multi list request allowed (-l or -s)\nTry '${_name_} -h' for more information."
(( EMPTY > 0 )) || die "missing file operand\nTry '${_name_} -h' for more information"
[ "$_HELP_" ]   && _help_   || true
[ "$_FILE_" ]   && _urls_   || true
[ "$_CURL_" ]   && _curl_   || true
[ "$_GREP_" ]   && _grep_   || true
[ "$_LIST_" ]   && _list_   || true
[ "$_SELECT_" ] && _select_ || true
[ "$_EXEC_" ]   && _exec_   || true
