#!/usr/bin/env bash

#-------------#
# SCRIPT NAME #
#-------------#
name=${0##*/}

#-----------#
# ERROR MSG #
#-----------#
die(){ printf "%s: %b\n" "${name^}" "$@" >&2 ; exit 2 ;}

#--------------#
# GET ALL URLS #
#--------------#
urls(){
    while read -r line ; do
        URLS+=( "$line" )
    done< <(grep -Po "$URLGATE_REGEX" "$1" 2> /dev/null)
}

#-------------------#
# GET URL FROM FILE #
#-------------------#
file(){
    [ -f "$FILE" ] && urls "$FILE" || die "'$FILE': No such file or directory"
}

#-------------------------#
# FETCH PAGE FROM THE WEB #
#-------------------------#
fetch(){
    local TMP="/tmp/curl.XXX"
if (eval "$URLGATE_CURL $CURL 2>&1 > $TMP 2> /dev/null"); then
    urls "$TMP"
else
    die "Cannot Curl the Link. Please check [Connection/Link]"
fi
    rm "$TMP"
}

#--------------------#
# SEARCH FOR PATTERN #
#--------------------#
pattern(){
    local line
    local _PATTERN_
while read -r line ;do
    [[ "$line" =~ $PATTERN ]] && _PATTERN_+=( "$line" )
done <<< "${URLS[@]}"

URLS=( ${_PATTERN_[@]} )
}

#---------------#
# LIST ALL URLS #
#---------------#
list(){ printf " [*] %s\n" "${URLS[@]}" ;}

#-----------------------#
# SLECT IN THE URL LIST #
#-----------------------#
Select(){
    local SELECT
    read -ra SELECT < <(printf "%s\n" "${URLS[@]}" | eval "$URLGATE_SELECT")
    URLS=( ${SELECT[@]} )
}

#----------------------#
# EXEC THE GIVIN LINK  #
#----------------------#
Exec(){
    URLGATE_EXEC=${COMMAND}
    for i in ${URLS[@]} ; {
        URLGATE_EXEC=${URLGATE_EXEC//%u/$i}
        eval "$URLGATE_EXEC"
    }
}

#-------------#
# HELP DIALOG #
#-------------#
help(){
while read ; do
    printf "%s\n" "$REPLY"
done <<-HELP
${name^^} Extract URLs from a text file
Usage: ${name} [OPTIONS] ... [FILE] ...
   Or: [CMD] | ${name} [OPTIONS]

OPTIONS
    -f <FILE>    : Extract URLs from file
    -c <URL>     : Extract URLs from the web
    -p <PATTERN> : Use only URLs that match PATTERN
    -e           : Exec command after select URL
    -E <COMMAND> : The command or script to use with 'e' option. [%u = URL]
    -l           : List All Extracted URLs
    -s           : Use Select application
    -h           : Display this help text and exit

VARIABLES
    URLGATE_SELECT
        SELECT command to use. Default [dmenu -p "Select Url:" -l 5]

    URLGATE_CURL
        Command to curl Web page. Default [curl -s]

    URLGATE_EXEC
        The command or script to use with 'e' option. Default [xdg-open %u]
        %u : Selected url (accept multiple select)

    URLGATE_REGEX
        REGEX regular expressions to use

NOTE
    Export ${name^^} Variables before you use them

HELP
}

#---------------#
# MAIN FUNCTION #
#---------------#
main(){
while getopts ":f:c:p:seE:lh" OPT ; do
    case "$OPT" in
        f )
            FILE="$OPTARG"
            ;;
        c )
            CURL="$OPTARG"
            ;;
        p )
            PATTERN="$OPTARG"
            ;;
        l )
            LIST=true
            ;;
        s )
            SELECT=true
            ;;
        e )
            EXEC=true
            ;;
        E )
            COMMAND="$OPTARG"
            ;;
        h )
            HELP=true
            ;;
        : )
            die "option requires an argument -- '$OPTARG' \nTry '$name -h' for more informations."
            ;;
        * )
            die "invalide option -- '$OPTARG' \nTry '$name -h' for more informations ."
            ;;
    esac
done
}

#-------------------#
# RUN MAIN FUNCTION #
#-------------------#
[ -p /dev/stdin ] && PIPE="/dev/stdin"
main "$@"

#------------------------#
# CHECK SCRIPT VARIABLES #
#------------------------#
[ "$URLGATE_CURL" ]   || URLGATE_CURL="curl -s"
[ "$URLGATE_SELECT" ] || URLGATE_SELECT="dmenu -p 'Select Url :' -l 5"
[ "$URLGATE_EXEC" ]   || URLGATE_EXEC="xdg-open %u"
[ "$URLGATE_REGEX" ]  || URLGATE_REGEX="(((http|https|ftp|gopher)|mailto):(\/\/)?[^ <>\"\t]|(www|ftp)[0-9]?\\.[-a-z0-9.]+)[^ .,;\t\n\r<\">\\):]?[^, <>\"\t]*[^ .,;\t\n\r<\">\\):]"

#----------------------#
# CHECK FOR USER ERROR #
#----------------------#
# check if user input file and curl or pipe
[ "$((${#FILE[@]}+${#CURL[@]}+${#PIPE[@]}))" -ge 2 ] && die "no Multi tasks allowed (-f, -c, Pipe). \nTry '$name -h' for more informations."
# check if user list and exec
[ "$((${#LIST[@]}+${#EXEC[@]}))" -eq 2 ] && die "no Multi tasks allowed (-l, -e). \nTry '$name -h' for more informations."

#---------------------#
# EXECUTE USE OPTIONS #
#---------------------#
[ "$HELP" ]     && help
[ "$FILE" ]     && file
[ "$CURL" ]     && fetch
[ "$PIPE" ]     && urls "$PIPE"
[ "$PATTERN" ]  && pattern
[ "$SELECT" ]   && Select
[ "$LIST" ]     && list
[ "$EXEC" ]     && Exec

#------------------------#
# JUST PRINT THE RESOULT #
#------------------------#
[ "$LIST" ] || [ "$EXEC" ] || printf "%s\n" "${URLS[@]}"
